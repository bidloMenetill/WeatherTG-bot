from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message
from aiogram.filters import CommandStart
import keyboards as kb
import os
from dotenv import load_dotenv
import requests
from datetime import datetime
import locale
load_dotenv()

locale.setlocale(locale.LC_TIME, 'en_US.UTF-8')

router = Router()
user_city_selection = {}
WEATHER_TOKEN = os.getenv("WEATHER_TOKEN")
API_URL = os.getenv("API_URL")

@router.message(CommandStart())
async def cmd_start(message: Message):
    last_name = message.from_user.last_name if message.from_user.last_name else ""
    await message.reply(
        f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name} {last_name}, —è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è! –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:',
        reply_markup=kb.main
    )

@router.message(F.text)
async def handle_text(message: Message):
    if message.text in ["–ë–∏—à–∫–µ–∫", "–ù–∞—Ä—ã–Ω", "–ß—É–π", "–û—à", "–î–∂–∞–ª–∞–ª-–ê–±–∞–¥", "–ò—Å—Å—ã–∫-–∫—É–ª—å", "–¢–∞–ª–∞—Å"]:
        user_city_selection[message.from_user.id] = message.text
        await message.reply(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥ {message.text}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫:",
            reply_markup=kb.second_step
        )
    elif message.text in ["–¢–µ–∫—É—â–∏–µ —Å—É—Ç–∫–∏", "3 –¥–Ω—è", "7 –¥–Ω–µ–π", "–ù–∞–∑–∞–¥"]:
        city = user_city_selection.get(message.from_user.id)
        if not city:
            await message.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥.")
            return
        if message.text == "–¢–µ–∫—É—â–∏–µ —Å—É—Ç–∫–∏":
            await get_hourly_weather(message, city)
        elif message.text == "3 –¥–Ω—è":
            await get_daily_weather(message, city, days=3)
        elif message.text == "7 –¥–Ω–µ–π":
            await get_daily_weather(message, city, days=7)
        elif message.text == "–ù–∞–∑–∞–¥" or message.text == "–Ω–∞–∑–∞–¥":
            await message.reply("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=kb.main)
    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.")

async def get_hourly_weather(message: Message, city: str):
    params = {
        "q": f"{city},KG",
        "appid": WEATHER_TOKEN,
        "units": "metric",
        "lang": "ru"
    }
    response = requests.get(API_URL, params=params)

    if response.status_code == 200:
        forecast_data = response.json()
        forecasts = forecast_data["list"][:8]

        weather_message = f"üå§Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ –≥–æ—Ä–æ–¥–µ {city} –Ω–∞ —Ç–µ–∫—É—â–∏–µ —Å—É—Ç–∫–∏:\n"
        for forecast in forecasts:
            time = forecast["dt_txt"]
            dt = datetime.strptime(time, "%Y-%m-%d %H:%M:%S")
            formatted_date = dt.strftime("%A, %d %B %Y")
            formatted_time = dt.strftime("%H:%M")
            temp = forecast["main"]["temp"]
            description = forecast["weather"][0]["description"]
            feels_like = forecast["main"]["feels_like"]
            humidity = forecast["main"]["humidity"]
            
            emoji = "üå°Ô∏è"
            if temp < 0:
                emoji = "‚ùÑÔ∏è"
            elif temp > 30:
                emoji = "‚òÄÔ∏è"
            elif temp > 20:
                emoji = "üå§Ô∏è"
            elif temp > 10:
                emoji = "üå•Ô∏è"

            weather_message += (
                f"\nüìÖ –î–∞—Ç–∞: {formatted_date}, üïí –í—Ä–µ–º—è: {formatted_time}\n"
                f"{emoji} –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C \n"
                f"üßä –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like}¬∞C\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description.capitalize()}\n"
                f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
            )
        await message.reply(weather_message)
    else:
        await message.reply("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def get_daily_weather(message: Message, city: str, days: int):
    params = {
        "q": f"{city},KG",
        "appid": WEATHER_TOKEN,
        "units": "metric",
        "lang": "ru"
    }
    response = requests.get(API_URL, params=params)

    if response.status_code == 200:
        forecast_data = response.json()
        forecasts = forecast_data["list"]

        daily_data = {}
        for forecast in forecasts:
            date = forecast["dt_txt"].split(" ")[0]
            temp = forecast["main"]["temp"]
            if date not in daily_data:
                daily_data[date] = []
            daily_data[date].append(temp)

        weather_message = f"üå§Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ –≥–æ—Ä–æ–¥–µ {city} –Ω–∞ {days} –¥–Ω—è(–µ–π):\n"
        for i, (date, temps) in enumerate(daily_data.items()):
            if i >= days:
                break
            dt = datetime.strptime(date, "%Y-%m-%d")
            formatted_date = dt.strftime("%A, %d %B %Y")
            avg_temp = sum(temps) / len(temps)
            emoji = "üå°Ô∏è"
            if avg_temp < 0:
                emoji = "‚ùÑÔ∏è"
            elif avg_temp > 30:
                emoji = "‚òÄÔ∏è"
            elif avg_temp > 20:
                emoji = "üå§Ô∏è"
            elif avg_temp > 10:
                emoji = "üå•Ô∏è"
            weather_message += f"\nüìÖ –î–∞—Ç–∞: {formatted_date}\n{emoji} –°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {avg_temp:.1f}¬∞C\n"

        await message.reply(weather_message)
    else:
        await message.reply("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
